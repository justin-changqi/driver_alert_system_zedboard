/*
 * gpio.h
 *
 *  Created on: Jun 17, 2018
 *      Author: justin
 */


#ifndef SRC_GPIO_H_
#define SRC_GPIO_H_

#include "xparameters.h"
//#include "xgpio.h"
//#include "xil_exception.h"
//
//#include "xscugic.h"
//#include "xil_printf.h"

#define GPIO_DEVICE_ID				XPAR_GPIO_0_DEVICE_ID
#define GPIO_CHANNEL_1_INT_MASK 	1

#define INTC_GPIO_INTERRUPT_ID 		XPAR_FABRIC_AXI_GPIO_0_IP2INTC_IRPT_INTR
#define INTC_DEVICE_ID				XPAR_SCUGIC_SINGLE_DEVICE_ID

#define GPIO_LEDS		0x0003
#define GPIO_SP			0x0004

#define GPIO_SW			0x0003

#define BUTTON_CHANNEL	 	 1	/* Channel 1 of the GPIO Device */
#define OUTPUT_CHANNEL	 	 2	/* Channel 2 of the GPIO Device */
#define BUTTON_INTERRUPT XGPIO_IR_CH1_MASK  /* Channel 1 Interrupt Mask */

#define INTERRUPT_CONTROL_VALUE 0x03

#define INTR_DELAY	0x00FFFFFF

#define INTC_DEVICE_ID			XPAR_SCUGIC_SINGLE_DEVICE_ID
#define INTC					XScuGic
#define INTC_HANDLER			XScuGic_InterruptHandler


// Function Define
int Gpio_init();

int GpioIntrExample(INTC *IntcInstancePtr, XGpio *InstancePtr,
			u16 DeviceId, u16 IntrId,
			u16 IntrMask, u32 *DataRead);

void GpioHandler(void *CallBackRef);

int GpioSetupIntrSystem(INTC *IntcInstancePtr, XGpio *InstancePtr,
			u16 DeviceId, u16 IntrId, u16 IntrMask);

void GpioDisableIntr(INTC *IntcInstancePtr, XGpio *InstancePtr,
			u16 IntrId, u16 IntrMask);

XGpio Gpio; /* The Instance of the GPIO Driver */

INTC Intc; /* The Instance of the Interrupt Controller Driver */

static u16 GlobalIntrMask; /* GPIO channel mask that is needed by
			    * the Interrupt Handler */

static volatile u32 IntrFlag; /* Interrupt Handler Flag */

#endif /* SRC_GPIO_H_ */
